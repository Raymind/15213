/*
 * trans.c - Matrix transpose B = A^T
 *
 * Each transpose function must have a prototype of the form:
 * void trans(int M, int N, int A[N][M], int B[M][N]);
 *
 * A transpose function is evaluated by counting the number of misses
 * on a 1KB direct mapped cache with a block size of 32 bytes.
 */
#include <stdio.h>
#include "cachelab.h"
#include "contracts.h"

int is_transpose(int M, int N, int A[N][M], int B[M][N]);

/*
 * transpose_submit - This is the solution transpose function that you
 *     will be graded on for Part B of the assignment. Do not change
 *     the description string "Transpose submission", as the driver
 *     searches for that string to identify the transpose function to
 *     be graded. The REQUIRES and ENSURES from 15-122 are included
 *     for your convenience. They can be removed if you like.
 */
char transpose_submit_desc[] = "Transpose submission";
void transpose_submit(int M, int N, int A[N][M], int B[M][N])
{
    REQUIRES(M > 0);
    REQUIRES(N > 0);
    ENSURES(is_transpose(M, N, A, B));

    int block_count = 0;

    for(int i = 0 ; i < 7; i++)
      {
	if (i >3)
	  int z = i - 3;
	for(int j = i - z; j >= z; j--)
	  {
	    for (int k =



    /*    int i, j, k;

    if(M == 32 && N == 32)
    {
        int* temp;
        int z = 0;
        for(int i = 0; i < 32; i += 8)
        {
            for(int j = 0; j < 32; j+=8)
            {
                for (int k = 0; k < 15; k++)
                {
                    if(k >=8)
                        z = k - 7;
                    for(int l = i+z; l <= i+k - z; l++)
                    {
                        temp = A[l];
                        for (int m = i+k; m >= z+j; m--)
                        {
                            B[m][l] = temp[m];
                        }
                    }
                }
            }
        }
                for (int i = 0; i < M; i++)
                {
                    B[i][i] = A[i][i];
                }
    }
    }*/

    // int z = 0;
    // int* temp;
    // if (M == 32 && N == 32)
    // {
    //     for (int i = 0; i < 7; i++)
    //     {
    //         if (i >=4)
    //         {
    //             z = i - 3;
    //         }
    //         for (int j = i - z; j >= z; j--)
    //         {
    //             for (int k = 8*j; k <= (8*j + 8); k++)
    //             {
    //                 temp = A[k];
    //                 for (int l = 8*(i-j); l <= (8*(i-j)) + 8; l++)
    //                 {
    //                     B[l][k]  = temp[l];
    //                 }
    //             }
    //         }
    //     }
    // }
    //}

/*
 * You can define additional transpose functions below. We've defined
 * a simple one below to help you get started.
 */

/*
 * trans - A simple baseline transpose function, not optimized for the cache.
 */
char trans_desc[] = "Simple row-wise scan transpose";
void trans(int M, int N, int A[N][M], int B[M][N])
{
    int i, j, tmp;

    REQUIRES(M > 0);
    REQUIRES(N > 0);

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            tmp = A[i][j];
            B[j][i] = tmp;
        }
    }

    ENSURES(is_transpose(M, N, A, B));
}

/*
 * registerFunctions - This function registers your transpose
 *     functions with the driver.  At runtime, the driver will
 *     evaluate each of the registered functions and summarize their
 *     performance. This is a handy way to experiment with different
 *     transpose strategies.
 */
void registerFunctions()
{
	/* Register your solution function */
    registerTransFunction(transpose_submit, transpose_submit_desc);

    /* Register any additional transpose functions */
    registerTransFunction(trans, trans_desc);

}

/*
 * is_transpose - This helper function checks if B is the transpose of
 *     A. You can check the correctness of your transpose by calling
 *     it before returning from the transpose function.
 */
int is_transpose(int M, int N, int A[N][M], int B[M][N])
{
    int i, j;

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; ++j) {
			if (A[i][j] != B[j][i]) {
				return 0;
			}
		}
    }
    return 1;
}

